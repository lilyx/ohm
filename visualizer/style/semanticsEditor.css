textarea {
  resize: none;
  outline: none;
  height: 12px;
  text-align: center;
  border: 0;
}

.pexpr:not(.failed) > .self.nextStep .label,
.pexpr:not(.failed) > .self.tmpNextStep .label {
  background: rgba(100, 149, 237, 0.4);
  border-bottom: 0px;
}
.pexpr:not(.failed) > .self.nextStep .label:hover,
.pexpr:not(.failed) > .self.tmpNextStep .label:hover {
  background: rgba(100, 149, 237, 0.6);
  border-color: rgba(100, 149, 237, 0.6);
}
.pexpr:not(.collapsed) > .self.passThrough:not(.selected):not(.preSelected) {
  border-bottom: 1px solid #ddd;
}
.pexpr:not(.collapsed) > .self.passThrough {
   margin-bottom: -1px;
}

.pexpr > .self.selected {
  border: 2px solid rgb(53, 151, 255);
}

.pexpr > .self.preSelected {
  border: 2px solid rgba(53, 151, 255, 0.5);
}

/* Show only the part marked by `showing` for passThrought node */
/*.self.passThrough > .semanticsEditor:not(.showing) > *:not(.showing) {
  display: none;
}
*/
.self.passThrough > .result:not(.showing) {
  display: none;
}

.semanticsEditor {
  display: none;
  position: absolute;
  left: 30%;
  top: 12%;
  min-width: 120px;
  border: 2px solid #ccc;
  padding: 4px 8px;
  background: white;
  border-radius: 10px 10px 6px 6px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}
.semanticsEditor.showing {
  display: block;
}

/* Editor header container */
.semanticsEditor .header {
  position: relative;
  display: flex;
  font-size: 15px;
  background: #ececec;
  padding: 4px 8px;
  margin: -4px -8px 0;
  border-radius: 8px 8px 0 0;
  cursor: default;
  -moz-user-select: none;
  -ms-user-select: none;
  -webkit-user-select: none;
}
.semanticsEditor .header directBt {
  display: flex;
}
.semanticsEditor .header directBt .disabled {
  color: #c1c1c1;
}
.semanticsEditor .header directBt *:not(.disabled):hover {
  font-weight: bolder;
}
.semanticsEditor .header nameTag {
  margin: 0 auto;  /* This is for align the names to center */
  color: rgb(82, 82, 82);
  font: message-box;
  border-radius: 6px;
  padding: 2px 4px;
  display: flex;
  background: #fafafa;
  border-width: 1px 0 1px 1px;
  border-style: solid;
  border-color: #dadada #d2d2d2 #c5c5c5;
  background-image: linear-gradient(to bottom, #fcfcfc, #f0f0f0);
  box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.7), 0 1px 2px rgba(0, 0, 0, 0.05);
}
.semanticsEditor .header nameTag:after {
  content: '\25BC';
  font-size: 9px;
  margin: 3px 0 0 2px;
}

.semanticsEditor .header closeBT {
  color: lightgray;
  cursor: default;
}
.semanticsEditor .header closeBT:hover {
  color: #999;
}

.mainBody .rule {
  font-family: Menlo, Monaco, sans-serif;
  font-size: 16px;
  display: flex;
  flex-direction: column;
  margin: 2px 8px;
}
.mainBody .rule cstNodeName:not(.default)::after {
  content: '\003D';
  clear: both;
  margin: 0 3px;
}
.mainBody .rule blocks {
  margin-left: 20px;
}
.mainBody .rule blocks::after {
  float: left;
  margin-left: 2px;
  margin-top: -2px;
  font-family: Optima;
  content: '\2192';
  color: slateblue;
  font-size: 16pt;
}
.mainBody .rule block {
  padding-top: 5px;
  padding-bottom: 5px;
  float: left;
  margin-left: 5px;
}
.mainBody .rule block div,
.mainBody .rule cstNodeName {
  color: rgb(123, 123, 123);
  float: left;
}
.mainBody .rule block div {
  display: flex;
  flex-direction: column;
  cursor: default;
}
.mainBody .rule block div > * {
  flex: 1;
}
.mainBody .rule block div span {
  color: orange;
  border-top: 1px solid;
  font-size: 6px;
  float: right;
}
.mainBody .rule block div:hover span {
  font-weight: bolder;
  font-size: 9px;
}
.mainBody .rule block real {
  display: inline-block;
  height: 12px;
  outline: none;
  padding-top: 8px;
  font: italic 12px Menlo, Monaco, sans-serif;
  color:  slateblue;
  border: white;
  padding-right: 2px;
  width: auto;
}

/* Operation arguments container */
.mainBody .argTags:not(:empty) {
  height: 100%;
  display: flex;
  flex: 1;
  padding-right: 12px;
}
.mainBody .argTags entry {
  display: flex;
  flex-direction: column;
}
.mainBody .argTags entry:not(:first-child) {
  border-left: 1px solid #c1d4f8;
}
.mainBody .argTags .argTag {
  position: relative;
  margin: 0 0 8px 12px;
  padding: 0 9px 0 8px;
  font-size: 10px;
  color: #555;
  text-decoration: none;
  text-shadow: 0 1px white;
  background: #fafafa;
  border-width: 1px 0 1px 1px;
  border-style: solid;
  border-color: #dadada #d2d2d2 #c5c5c5;
  border-radius: 3px 0 0 3px;
  background-image: linear-gradient(to bottom, #fcfcfc, #f0f0f0);
  box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.7), 0 1px 2px rgba(0, 0, 0, 0.05);
}
.argTags .argTag:after {
  content: '';
  z-index: 2;
  position: absolute;
  top: 3px;
  right: -2px;
  width: 5px;
  height: 6px;
  opacity: .95;
  background: #56a3d5;
  border-radius: 3px 0 0 3px;
  -webkit-box-shadow: inset 1px 0 #276f9e;
  box-shadow: inset 1px 0 #276f9e;
}
.argTag span {
  position: absolute;
  top: 0;
  left: 100%;
  z-index: 2;
  overflow: hidden;
  width: auto;
  padding: 0 6px;
  color: white;
  text-shadow: 0 -1px rgba(0, 0, 0, 0.3);
  background: #56a3d5;
  border: 1px solid;
  margin-top: -1px;
  border-color: #3591cd #318cc7 #2f86be;
  border-radius: 0 2px 2px 0;
  opacity: .95;
  background-image: linear-gradient(to bottom, #6aaeda, #4298d0);
  transition: 0.3s ease-out;
  transition-property: padding, max-width;
  box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.15), 1px 1px 2px rgba(0, 0, 0, 0.2);
}

/* Action editor container */
.mainBody .body {
  padding-left: 10pt;
  overflow: visible;
}
.mainBody .body .CodeMirror {
  cursor: default;
  display: block;
  height: auto;
  width: auto;
  color: slateblue;
  font-size: 16px;
  font-family: Menlo, Monaco, sans-serif;
}
.mainBody .body .CodeMirror-lines {
  padding: 8px;
}
.mainBody .body .CodeMirror-lines pre{
  padding-left: 0px;
}

/* Semantics result container */
.pexpr:not(.failed) > .self.nextStep .result:not(.showing),
.pexpr:not(.failed) > .self.tmpNextStep .result:not(.showing) {
  display: none;
}

.self .result {
  display: flex;
  color: slateblue;
  font-size: 16px;
  margin-top: -1px;
  padding: 4px;
  cursor: default;
  border: 1px solid #efefef;
  border-top: none;
}
.self:hover .result {
  border-color: #ddd;
}

.semanticsEditor .result:empty,
.self .result:empty {
  padding: 0;
}

.result resultBlock {
  display: flex;
  justify-content: center;
  flex: 1;
}
.result resultBlock.hidden {
  display: none;
}
.result resultBlock.highlight {
  background: rgba(255, 255, 0, 0.19);
  font-weight: bolder;
}
.result resultBlock:not(.showing).leftBorder {
  padding-left: 2px;
  border-left: 1px solid rgba(39, 111, 158, 0.4);
}
.result resultBlock:not(:last-child) {
  padding-right: 2px;
}
.result resultBlock:empty {
  display: none;
}

.result resultBlock operation {
  font-size: 6px;
  color: orchid;
  align-self: flex-end;
}
.result resultBlock.highlight operation{
  font-size: 10px;
}
.result resultBlock.showing operation {
  display: none;
}

.semanticsEditor .result.error,
.self .result resultBlock.error value {
  background-color: rgb(255, 215, 222);
  color: red;
  text-align: center;
}

.self .result resultBlock.forced value {
  color: #999;
}

.semanticsEditor .footer {
  margin: 0 -8px -4px;
  border-radius: 0 0 6px 6px;
}
.semanticsEditor .footer .info {
  padding: 4px 8px;
  font-size: 10px;
  text-align: center;
  display:flex;
  flex: 1;
}
.semanticsEditor .footer .info col {
  display: flex;
  flex: 1 auto;
  flex-direction: column;
}
.semanticsEditor .footer .info col > * {
  padding: 2px 4px;
}
.semanticsEditor .footer .info col.node,
.semanticsEditor .footer .info col operationCell {
  font-size: 12px;
  color: rgb(53, 151, 255);
}
.semanticsEditor .footer .info col .resultCell {
  display: flex;
}
.semanticsEditor .footer .info col .resultCell * {
  flex: 1;
}
.semanticsEditor .footer .info col > * {
  height: 14px;
}
.semanticsEditor .footer .info col:not(:last-child) {
  border-right: 1px solid black;
}
.semanticsEditor .footer .info col > *:not(:last-child) {
  border-bottom: 1px solid black;
}
.semanticsEditor .footer .info * {
  font-weight: inherit;
}
.semanticsEditor .footer .info editorClickable {
  cursor: pointer;
  text-align: center;
}
.semanticsEditor .footer .info editorClickable:not(.result) {
  font-style: italic;
  text-decoration: underline;
  color: blue;
}
.semanticsEditor .footer .info editorClickable:hover {
  font-weight: bolder;
}
.semanticsEditor .footer .info editorClickable.result:hover {
  color: blue;
}
.semanticsEditor .footer .info editorClickable.result:before {
  content: '\270E';
  margin-right: 2px;
}
.semanticsEditor .footer .info editorClickable.add:not(:first-child) {
  border-left: 1px solid black;
  padding-left: 4px;
}
.semanticsEditor .footer .resultCell pair {
  display: flex;
  flex: 1;
  margin-right: 4px;
}
.semanticsEditor .footer .resultCell pair result.default {
  font-style: italic;
  color: #c1c1c1; 
}
.semanticsEditor .footer .resultCell pair:not(:first-child) {
  border-left: 1px solid black;
  margin-left: 2px;
}
.semanticsEditor .footer .resultCell args {
  display: flex;
  flex: 1;
}
.semanticsEditor .footer .resultCell args:before {
  content: '\0028';
  margin-left: 2px;
}
.semanticsEditor .footer .resultCell args:after {
  content: '\0029\2192';
  margin-right: 2px;
}
.semanticsEditor .footer .resultCell .arg {
  padding: 0 2px;
  outline: none;
}
.semanticsEditor .footer .resultCell .arg:not(:first-child) {
  padding-left: 4px;
}
.semanticsEditor .footer .resultCell .arg:not(:last-child):after {
  content: '\002C';
  margin-left: 2px;
}
.semanticsEditor .footer .resultCell .arg[placeholder]:empty:before {
  content: attr(placeholder);
  font-style: italic;
  color: #c1c1c1; 
}

/* `Force Evaluation` entry in `parseTreeMenu` */
.contextMenu label .triangle {
  float: right;
  font-size: 12px;
  margin-left: 1em;
  position: relative;
  right: -10px;
  top: 1px;
}
.contextMenu li div:not(:first-child), li textarea {
  margin-left: 10px;
}
.contextMenu ul ul ul li:hover div{
  color: white;
}
.contextMenu ul li textarea{
  border: 1px solid #C5C5C5;
}
.contextMenu li .value.error{
  color: red;
}

/* node list */
#nodeList li span {
  margin-left: 4px;
  opacity: 0.5;
}

/* name list */
#nameList .name.selected:after {
  content: '\2713';
  margin-right: 2px;
}
#nameList .name.nextStep {
  color: blue;
}
